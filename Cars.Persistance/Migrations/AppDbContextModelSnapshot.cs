// <auto-generated />
using System;
using Cars.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cars.Persistance.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("Cars.Domain.Car.Body", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Bodies");
                });

            modelBuilder.Entity("Cars.Domain.Car.Box", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BoxType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Boxes");
                });

            modelBuilder.Entity("Cars.Domain.Car.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Cars.Domain.Car.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BodyId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BodyId1")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BoxId1")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CarColorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CarColorId1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Engine")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Mileage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SteeringWheelId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SteeringWheelId1")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BodyId");

                    b.HasIndex("BodyId1");

                    b.HasIndex("BoxId");

                    b.HasIndex("BoxId1");

                    b.HasIndex("BrandId");

                    b.HasIndex("CarColorId");

                    b.HasIndex("CarColorId1");

                    b.HasIndex("SteeringWheelId");

                    b.HasIndex("SteeringWheelId1");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Cars.Domain.Car.CarColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CarColors");
                });

            modelBuilder.Entity("Cars.Domain.Car.CarImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CarId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarImages");
                });

            modelBuilder.Entity("Cars.Domain.Car.SteeringWheel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("SteeringWheelType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SteeringWheels");
                });

            modelBuilder.Entity("Cars.Domain.Car.Car", b =>
                {
                    b.HasOne("Cars.Domain.Car.Body", null)
                        .WithMany()
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cars.Domain.Car.Body", null)
                        .WithMany("Cars")
                        .HasForeignKey("BodyId1");

                    b.HasOne("Cars.Domain.Car.Box", null)
                        .WithMany()
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cars.Domain.Car.Box", null)
                        .WithMany("Cars")
                        .HasForeignKey("BoxId1");

                    b.HasOne("Cars.Domain.Car.Brand", null)
                        .WithMany("Cars")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cars.Domain.Car.CarColor", null)
                        .WithMany()
                        .HasForeignKey("CarColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cars.Domain.Car.CarColor", null)
                        .WithMany("Cars")
                        .HasForeignKey("CarColorId1");

                    b.HasOne("Cars.Domain.Car.SteeringWheel", null)
                        .WithMany()
                        .HasForeignKey("SteeringWheelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cars.Domain.Car.SteeringWheel", null)
                        .WithMany("Cars")
                        .HasForeignKey("SteeringWheelId1");
                });

            modelBuilder.Entity("Cars.Domain.Car.CarImage", b =>
                {
                    b.HasOne("Cars.Domain.Car.Car", "Car")
                        .WithMany("Images")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Cars.Domain.Car.Body", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Cars.Domain.Car.Box", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Cars.Domain.Car.Brand", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Cars.Domain.Car.Car", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Cars.Domain.Car.CarColor", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Cars.Domain.Car.SteeringWheel", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
